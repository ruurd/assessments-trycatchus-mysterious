require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe Api::V1::QuestionsController, type: :controller do

  login_user

  # This should return the minimal set of attributes required to create a valid
  # Api::V1::Question. As you add validations to Api::V1::Question, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    {
        user_id: 1,
        description: 'What is the mystery',
        query: 'what mystery',
        created_at: DateTime.new,
        updated_at: DateTime.new,
        googled_at: nil
    }
  }

  let(:invalid_attributes) {
    {
        description: nil,
        query: nil,
    }
  }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # Api::V1::QuestionsController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  describe "GET #index" do
    it "assigns all question_questions as @question_questions" do
      question = Question.create! valid_attributes
      get :index, {format: 'json'}, valid_session
      expect(assigns(:questions)).to eq([question])
    end
  end

  describe "GET #show" do
    it "assigns the requested question as @question" do
      question = Question.create! valid_attributes
      get :show, {format: 'json', :id => question.to_param}, valid_session
      expect(assigns(:question)).to eq(question)
    end
  end

  describe "POST #create" do
    context "with valid params" do
      it "creates a new Api::V1::Question" do
        expect {
          post :create, {format: 'json', :question => valid_attributes}, valid_session
        }.to change(Question, :count).by(1)
      end

      it "assigns a newly created question as @question" do
        post :create, {format: 'json', :question => valid_attributes}, valid_session
        expect(assigns(:question)).to be_a(Question)
        expect(assigns(:question)).to be_persisted
      end

      it "returns result code for succes" do
        post :create, {format: 'json', :question => valid_attributes}, valid_session
        expect(response.status).to eq(201)
      end
    end

    context "with invalid params" do
      it "assigns a newly created but unsaved question as @question" do
        post :create, {format: 'json', :question => invalid_attributes}, valid_session
        expect(response.status).to eq(422)
      end
    end
  end

  describe "PUT #update" do
    context "with valid params" do
      let(:new_attributes) {
        {
            description: 'What is the longest unsolved mystery',
            query: 'longest unsolved mystery',
        }
      }

      it "updates the requested question" do
        question = Question.create! valid_attributes
        put :update, {:id => question.to_param, :question => new_attributes}, valid_session
        question.reload
        expect(response.status).to eq(204)
        expect(question.description).to eq('What is the longest unsolved mystery')
      end

      it "assigns the requested question as @question" do
        question = Question.create! valid_attributes
        put :update, {:id => question.to_param, :question => valid_attributes}, valid_session
        expect(assigns(:question)).to eq(question)
        expect(response.status).to eq(204)
      end
    end

    context "with invalid params" do
      it "assigns the question as @question" do
        question = Question.create! valid_attributes
        put :update, {:id => question.to_param, :question => invalid_attributes}, valid_session
        expect(assigns(:question)).to eq(question)
        expect(response.status).to be(422)
      end
    end
  end

  describe "DELETE #destroy" do
    it "destroys the requested question" do
      question = Question.create! valid_attributes
      expect {
        delete :destroy, {:id => question.to_param}, valid_session
      }.to change(Question, :count).by(-1)
    end
  end

end
